// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Workflow.Infrastructure.Data;

#nullable disable

namespace Workflow.Infrastructure.Migrations
{
    [DbContext(typeof(WorkflowDbContext))]
    [Migration("20250129091559_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Workflow.Domain.Models.SubflowConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubflowDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WaitForCompletion")
                        .HasColumnType("boolean");

                    b.Property<string>("_inputMapping")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("_outputMapping")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.HasKey("Id");

                    b.HasIndex("StateId")
                        .IsUnique();

                    b.HasIndex("SubflowDefinitionId");

                    b.ToTable("SubflowConfig");
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.WorkflowInstanceTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Result")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowInstanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkflowTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("StateId");

                    b.HasIndex("Status");

                    b.HasIndex("WorkflowInstanceId");

                    b.HasIndex("WorkflowTaskId");

                    b.ToTable("WorkflowInstanceTasks");
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.WorkflowTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WorkflowStateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowStateId");

                    b.ToTable("WorkflowTasks", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.WorkflowTaskAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("FunctionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TransitionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Trigger")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WorkflowInstanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowTransitionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("StateId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TransitionId");

                    b.HasIndex("WorkflowInstanceId");

                    b.HasIndex("WorkflowTransitionId");

                    b.ToTable("WorkflowTaskAssignment");
                });

            modelBuilder.Entity("Workflow.Domain.Models.Views.WorkflowView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TransitionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("WorkflowDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkflowVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("TransitionId");

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("WorkflowViews");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowCorrelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParentInstanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentStateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubflowInstanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentInstanceId");

                    b.HasIndex("ParentStateId");

                    b.HasIndex("SubflowInstanceId")
                        .IsUnique();

                    b.ToTable("WorkflowCorrelations");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClientVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("WorkflowDefinitions");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("EnrichStateData")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("ResponseMapping")
                        .HasColumnType("text");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkflowDefinitionId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowDefinitionId");

                    b.HasIndex("WorkflowDefinitionId1");

                    b.ToTable("WorkflowFunctions", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowHumanTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Assignee")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkflowInstanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("WorkflowInstanceId");

                    b.ToTable("WorkflowHumanTasks");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrentStateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkflowDefinitionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("WorkflowInstances");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowInstanceData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkflowInstanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowInstanceId")
                        .IsUnique();

                    b.ToTable("WorkflowInstanceData");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("StateType")
                        .HasColumnType("integer");

                    b.Property<int>("SubType")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowDefinitionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("WorkflowStates");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowStateData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EnteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkflowInstanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("_data")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("WorkflowInstanceId");

                    b.ToTable("WorkflowStateData");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowTransition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FromStateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToStateId")
                        .HasColumnType("uuid");

                    b.Property<int>("TriggerType")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("_triggerConfig")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.HasKey("Id");

                    b.HasIndex("FromStateId");

                    b.HasIndex("TaskId");

                    b.HasIndex("ToStateId");

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("WorkflowTransitions");
                });

            modelBuilder.Entity("WorkflowFunctionWorkflowState", b =>
                {
                    b.Property<Guid>("StatesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkflowFunctionId")
                        .HasColumnType("uuid");

                    b.HasKey("StatesId", "WorkflowFunctionId");

                    b.HasIndex("WorkflowFunctionId");

                    b.ToTable("WorkflowFunctionStates", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.DaprBindingTask", b =>
                {
                    b.HasBaseType("Workflow.Domain.Models.Tasks.WorkflowTask");

                    b.Property<string>("BindingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("DaprBindingTasks", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.DaprHttpEndpointTask", b =>
                {
                    b.HasBaseType("Workflow.Domain.Models.Tasks.WorkflowTask");

                    b.Property<string>("EndpointName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Headers")
                        .HasColumnType("jsonb");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("DaprHttpEndpointTasks", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.DaprPubSubTask", b =>
                {
                    b.HasBaseType("Workflow.Domain.Models.Tasks.WorkflowTask");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PubSubName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.ToTable("DaprPubSubTasks", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.DaprServiceTask", b =>
                {
                    b.HasBaseType("Workflow.Domain.Models.Tasks.WorkflowTask");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("HttpVerb")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("QueryString")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("TimeoutSeconds")
                        .HasColumnType("integer");

                    b.ToTable("DaprServiceTasks", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.HttpTask", b =>
                {
                    b.HasBaseType("Workflow.Domain.Models.Tasks.WorkflowTask");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Headers")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("TimeoutSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("ValidateSSL")
                        .HasColumnType("boolean");

                    b.ToTable("HttpTasks", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.HumanTask", b =>
                {
                    b.HasBaseType("Workflow.Domain.Models.Tasks.WorkflowTask");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EscalationAssignee")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("EscalationTimeoutMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReminderIntervalMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.ToTable("HumanTasks", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Models.SubflowConfig", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowState", "State")
                        .WithOne("SubflowConfig")
                        .HasForeignKey("Workflow.Domain.Models.SubflowConfig", "StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowDefinition", "SubflowDefinition")
                        .WithMany()
                        .HasForeignKey("SubflowDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("SubflowDefinition");
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.WorkflowInstanceTask", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowInstance", "WorkflowInstance")
                        .WithMany()
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.Tasks.WorkflowTask", "WorkflowTask")
                        .WithMany()
                        .HasForeignKey("WorkflowTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("WorkflowInstance");

                    b.Navigation("WorkflowTask");
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.WorkflowTask", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowState", null)
                        .WithMany("Tasks")
                        .HasForeignKey("WorkflowStateId");
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.WorkflowTaskAssignment", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowFunction", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Workflow.Domain.Models.WorkflowState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Workflow.Domain.Models.Tasks.WorkflowTask", "Task")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowTransition", "Transition")
                        .WithMany()
                        .HasForeignKey("TransitionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Workflow.Domain.Models.WorkflowInstance", "Instance")
                        .WithMany()
                        .HasForeignKey("WorkflowInstanceId");

                    b.HasOne("Workflow.Domain.Models.WorkflowTransition", null)
                        .WithMany("TaskAssignments")
                        .HasForeignKey("WorkflowTransitionId");

                    b.Navigation("Function");

                    b.Navigation("Instance");

                    b.Navigation("State");

                    b.Navigation("Task");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("Workflow.Domain.Models.Views.WorkflowView", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowState", "State")
                        .WithMany("Views")
                        .HasForeignKey("StateId");

                    b.HasOne("Workflow.Domain.Models.WorkflowTransition", "Transition")
                        .WithMany("Views")
                        .HasForeignKey("TransitionId");

                    b.HasOne("Workflow.Domain.Models.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany("Views")
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("Transition");

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowCorrelation", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowInstance", "ParentInstance")
                        .WithMany("ChildCorrelations")
                        .HasForeignKey("ParentInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowState", "ParentState")
                        .WithMany()
                        .HasForeignKey("ParentStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowInstance", "SubflowInstance")
                        .WithOne("ParentCorrelation")
                        .HasForeignKey("Workflow.Domain.Models.WorkflowCorrelation", "SubflowInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentInstance");

                    b.Navigation("ParentState");

                    b.Navigation("SubflowInstance");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowFunction", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany()
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Workflow.Domain.Models.WorkflowDefinition", null)
                        .WithMany("Functions")
                        .HasForeignKey("WorkflowDefinitionId1");

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowHumanTask", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowInstance", "WorkflowInstance")
                        .WithMany("HumanTasks")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowInstance", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowState", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany("Instances")
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentState");

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowInstanceData", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowInstance", "WorkflowInstance")
                        .WithOne()
                        .HasForeignKey("Workflow.Domain.Models.WorkflowInstanceData", "WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowState", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany("States")
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowStateData", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowInstance", "WorkflowInstance")
                        .WithMany("StateData")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowTransition", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowState", "FromState")
                        .WithMany()
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.Tasks.WorkflowTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("Workflow.Domain.Models.WorkflowState", "ToState")
                        .WithMany()
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany("Transitions")
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromState");

                    b.Navigation("Task");

                    b.Navigation("ToState");

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("WorkflowFunctionWorkflowState", b =>
                {
                    b.HasOne("Workflow.Domain.Models.WorkflowState", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Models.WorkflowFunction", null)
                        .WithMany()
                        .HasForeignKey("WorkflowFunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.DaprBindingTask", b =>
                {
                    b.HasOne("Workflow.Domain.Models.Tasks.WorkflowTask", null)
                        .WithOne()
                        .HasForeignKey("Workflow.Domain.Models.Tasks.DaprBindingTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.DaprHttpEndpointTask", b =>
                {
                    b.HasOne("Workflow.Domain.Models.Tasks.WorkflowTask", null)
                        .WithOne()
                        .HasForeignKey("Workflow.Domain.Models.Tasks.DaprHttpEndpointTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.DaprPubSubTask", b =>
                {
                    b.HasOne("Workflow.Domain.Models.Tasks.WorkflowTask", null)
                        .WithOne()
                        .HasForeignKey("Workflow.Domain.Models.Tasks.DaprPubSubTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.DaprServiceTask", b =>
                {
                    b.HasOne("Workflow.Domain.Models.Tasks.WorkflowTask", null)
                        .WithOne()
                        .HasForeignKey("Workflow.Domain.Models.Tasks.DaprServiceTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.HttpTask", b =>
                {
                    b.HasOne("Workflow.Domain.Models.Tasks.WorkflowTask", null)
                        .WithOne()
                        .HasForeignKey("Workflow.Domain.Models.Tasks.HttpTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.HumanTask", b =>
                {
                    b.HasOne("Workflow.Domain.Models.Tasks.WorkflowTask", null)
                        .WithOne()
                        .HasForeignKey("Workflow.Domain.Models.Tasks.HumanTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workflow.Domain.Models.Tasks.WorkflowTask", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowDefinition", b =>
                {
                    b.Navigation("Functions");

                    b.Navigation("Instances");

                    b.Navigation("States");

                    b.Navigation("Transitions");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowInstance", b =>
                {
                    b.Navigation("ChildCorrelations");

                    b.Navigation("HumanTasks");

                    b.Navigation("ParentCorrelation");

                    b.Navigation("StateData");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowState", b =>
                {
                    b.Navigation("SubflowConfig");

                    b.Navigation("Tasks");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("Workflow.Domain.Models.WorkflowTransition", b =>
                {
                    b.Navigation("TaskAssignments");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
